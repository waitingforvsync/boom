\\ Entry point.
\\ Anything from here on is executed once and discarded.

ALIGN &100

.entry
	CLD
	CLI
	
	\\ Shut down the OS
	
	LDA &FFB7:STA 0
	LDA &FFB8:STA 1
	LDY #10
	LDA (0),Y:STA &20A:INY
	LDA (0),Y:STA &20B						; Fetch default OSBYTE vector

	LDA #16:LDX #0:JSR &FFF4				; Disable ADC
;	LDA #143:LDX #12:LDY #255:JSR &FFF4		; claim NMIs
;	LDA #140:LDX #0:JSR &FFF4				; select tape filing system for safety
	LDA #19:JSR &FFF4						; wait for vsync before changing CRTC

	SEI
	LDX #&7F:TXS							; &180..&1FF free for... something.
	STX &FE4E:STX &FE6E						; disable all VIA interrupts
	STX &FE4D:STX &FE6D						; and clear all VIA flags
	STX &FE43								; keyboard write bits 0-6
	LDA #&C0:STA &FE4E						; enable System T1 interrupts
	LDA #&40:STA &FE4B:STA &FE6B			; free-run System/User T1 timer operation, T2 timed
	LDA #&0F:STA &FE42						; gain access to the addressable latch
	LDA #&03:STA &FE40						; keyboard autoscan off
	
	\\ Set up video
	
	LDX #13
	.crtcloop
	STX &FE00:LDA crtcvals,X:STA &FE01
	DEX
	BPL crtcloop
	
	\\ Set Video ULA MODE 5 and set colour 0 (other colours handled by the IRQ routine)
	
	LDA #&C4:STA &FE20
	LDA #&07:STA &FE21
	LDA #&17:STA &FE21
	LDA #&47:STA &FE21
	LDA #&57:STA &FE21
	
	\\ Disable shadow RAM
	
	LDA #0:STA &FE34
	
	\\ Set up new IRQ handler
	
	LDA #LO(irq):STA &204
	LDA #HI(irq):STA &205

	\\ Sync to vsync
	
	LDA #2:STA &FE4D
	.waitforvsync
	BIT &FE4D
	BEQ waitforvsync

	; Roughly synced (to within 10 cycles)
	; Now fine tune by waiting just less than one frame
	; and check if VSync has fired. Repeat until it hasn't.
	; One frame = 312*128 = 39936 cycles
	
	.syncloop
	STA &FE4D		; 6

	LDX #209		; 2
	.outerloop
	LDY #37			; 2
	.innerloop
	DEY				; 2
	BNE innerloop	; 3/2 (innerloop = 5*37+2-1 = 186)
	DEX				; 2
	BNE outerloop	; 3/2 (outerloop = (186+2+3)*209+2-1 = 39920)

	BIT &FE4D 		; 6
	BNE syncloop 	; 3 (total = 39920+6+6+3 = 39935, one cycle less than a frame!)

	IF HI(syncloop) <> HI(P%)
	ERROR "This loop must execute within the same page"
	ENDIF

	; We are synced precisely with VSync!
	; Now we have to set up the first timer which will take us
	; to the first line of the visible screen
	
	; Latency until setting timer below
	; BNE syncloop       2
	; LDA #              2
	; STA &FE44          6
	; LDA #              2
	; STA &FE45          6
	
	; Latency from interrupt path:
	; (IRQ)              7
	; STA &FC            3
	; PLA                4
	; PHA                3
	; AND #&10           2
	; BNE *+5            2
	; JMP (&0204)        5 (CMOS 6)

	; BIT &FE4D          6 (CMOS 5)
	; BVS                3
	;
	; Total: 53
	latency = (53 + 1) DIV 2
	left_border_offset = (irq_cycles_before_top_screen + 1) DIV 2
	initial_timer = ((39 - screen_vsync_pos) * 8 - screen_vsync_width) * 64 - left_border_offset - latency

	LDA #LO(initial_timer-2):STA &FE44
	LDA #HI(initial_timer-2):STA &FE45

	LDA #LO((screen_height + 16) * 64 - 2):STA &FE46
	LDA #HI((screen_height + 16) * 64 - 2):STA &FE47
	
	CLI
	
	\\ Initialize zp
	
	LDX #zpinit_end-zpinit_start-1
	.zpinitloop
	LDA zpinitvals,X
	STA zpinit_start,X
	DEX
	BPL zpinitloop
	
	\\ Build autogenerated code
	
	LDA #LO(screenfill1):STA write
	LDA #HI(screenfill1):STA write+1
	LDA #HI(screenaddr1):STA addr
	JSR buildfill
	
	LDA #LO(screenfill2):STA write
	LDA #HI(screenfill2):STA write+1
	LDA #HI(screenaddr2):STA addr
	JSR buildfill
	
	LDA #LO(screenclear1):STA write
	LDA #HI(screenclear1):STA write+1
	LDA #HI(screenaddr1):STA addr
	JSR buildcls

	LDA #LO(screenclear2):STA write
	LDA #HI(screenclear2):STA write+1
	LDA #HI(screenaddr2):STA addr
	JSR buildcls

	\\ Build tables
	
	JSR buildtables
	
	\\ Build colour table
	
;	JSR buildcolours
	
	\\ Initialize HUD screen
	
	LDX #hud_rows:LDA #0:TAY
	.hudclear
	STA screenaddrhud,Y
	INY:BNE hudclear
	INC hudclear+2
	DEX:BNE hudclear
	
	LDA #0:TAY:STA write:LDA #HI(screenaddrhud):STA write+1
	LDX #6:CLC
	.hudbardots
	LDA #&80:STA (write),Y
	TYA:ADC #40:TAY
	DEX:BPL hudbardots
	
	LDA #0:STA barpos:STA barpos+1

	
	\\ Proper start

	JMP main


.crtcvals
	EQUB 63										; CRTC R0 - horizontal total
	EQUB screen_width DIV 4						; CRTC R1 - horizontal displayed
	EQUB screen_hsync_pos						; CRTC R2 - horizontal sync pos
	EQUB 4 + (screen_vsync_width << 4)			; CRTC R3 - sync width
	EQUB 38										; CRTC R4 - vertical total
	EQUB 0										; CRTC R5 - vertical total adjust
	EQUB screen_height DIV 8					; CRTC R6 - vertical displayed
	EQUB screen_vsync_pos						; CRTC R7 - vertical sync pos
	EQUB &F0									; CRTC R8 - interlace
	EQUB 7										; CRTC R9 - scan lines per character
	EQUB 32										; CRTC R10 - cursor start
	EQUB 7										; CRTC R11 - cursor end
	EQUB HI(screenaddr2 DIV 8)					; CRTC R12 - screen start address, hi
	EQUB 0										; CRTC R13 - screen start address, lo


.zpinitvals
{
	.multablo_ptr		EQUW multablo
	.multabneglo_ptr	EQUW multabneglo
	.multabhi_ptr		EQUW multabhi
	.multabneghi_ptr	EQUW multabneghi
	.scrnbase			EQUB HI(screenaddr2)
	.dispscrnhi			EQUB HI(screenaddr2 DIV 8), 0

	.scrnswapflag		EQUB 0
	.numbars			EQUB 0
	.numlines			EQUB 0
	.numcachedsubzones	EQUB 0
	.startcontindex		EQUB 0
}

IF (P%-zpinitvals <> zpinit_end-zpinit_start)
	ERROR "Uninitialized zpinit member"
ENDIF
