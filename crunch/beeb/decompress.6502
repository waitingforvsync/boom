dest = &72
bitstream = &74
fixedbits = &75
numblocks = &76
temp = &78
count = &79
addr = &7A


.getbit
    \\ Gets one bit from the bitstream
    \\ On exit:
    \\   A preserved
    \\   X preserved
    \\   Y corrupted
    \\   C = bit
    LSR bitstream
    BNE samebyte

compressed_src = P%+1
    LDY &FFFF
    INC compressed_src
    BNE P%+5
    INC compressed_src+1
    STY bitstream
    ROR bitstream
.samebyte
    RTS


.get8bits
    LDX #8
.getbits
    \\ Gets a value composed of a specified number of bits from the bitstream
    \\ Note: bits must be stored reversed (most significant bit first)
    \\ On entry:
    \\   X = number of bits
    \\ On exit:
    \\   A = value lsb
    \\   X = 0
    \\   Y corrupted
    \\   temp = value msb
    \\   C = 0
    JSR getbit
    ROL A
    ROL temp
    DEX
    BNE getbits
    RTS


.getgammavalue
    \\ Gets an Elias Gamma value from the bitstream
    \\ On exit:
    \\   A = value lsb
    \\   X = 0
    \\   Y corrupted
    \\   temp = value msb
    \\   C = 0
    LDX #0
    STX temp
    DEX
    LDA #1
.getgammaloop
    JSR getbit
    INX
    BCC getgammaloop
    BNE getbits
    CLC
    RTS


.getcount
    LDA numblocks:BNE skip
    DEC numblocks+1:BPL skip
    PLA:PLA:RTS
    .skip
    DEC numblocks

    JSR getgammavalue
    STA count
    CMP #0
    RTS


.decompress
    LDA #1
    STA bitstream

    JSR getgammavalue:SBC #0
    JSR get8bits
    STA numblocks
    LDA temp
    STA numblocks+1
    
    LDA #0
    LDX #4:JSR getbits
    STA fixedbits

.decompressloop
    JSR getcount
    BEQ reference

.literal
    JSR get8bits
    LDY #0:STA (dest),Y
    INC dest
    BNE P%+4
    INC dest+1
    DEC count
    BNE literal

    JSR getcount
    BEQ literal

.reference
    JSR getgammavalue:SBC #0
    LDX fixedbits
    JSR getbits

    EOR #255:ADC dest:STA addr
    LDA dest+1:SBC temp:STA addr+1

    JSR getgammavalue:STA temp

    LDY #255
.copyloop
    INY
    LDA (addr),Y
    STA (dest),Y
    CPY temp
    BNE copyloop

    LDA dest:ADC temp:STA dest  ; C set from the CPY above
    BCC P%+4:INC dest+1

    DEC count
    BNE reference
    BEQ decompressloop


PRINT "Length of decompress: ", P%-decompress, "bytes"
